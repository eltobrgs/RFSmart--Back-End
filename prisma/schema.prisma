// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserModuleAccess {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  moduleId  String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  module    Module    @relation(fields: [moduleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, moduleId])
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  email             String            @unique
  name              String?
  password          String
  role              Role              @default(USER)
  products          Product[]         @relation("UserProducts")
  moduleAccess      UserModuleAccess[]
  accessibleCourseIds String[] @db.ObjectId
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
}

model Product {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  category        String
  description     String
  whatsapp        String?   // Número do WhatsApp do vendedor
  userId          String?   @db.ObjectId
  user            User?     @relation("UserProducts", fields: [userId], references: [id])
  modules         Module[]  @relation("ProductModules")
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt
}

model Module {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  order           Int
  productId       String            @db.ObjectId
  product         Product           @relation("ProductModules", fields: [productId], references: [id])
  lessons         Lesson[]          @relation("ModuleLessons")
  userAccess      UserModuleAccess[]
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @updatedAt
}

model Lesson {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  videoUrl    String?
  order       Int
  moduleId    String    @db.ObjectId
  module      Module    @relation("ModuleLessons", fields: [moduleId], references: [id])
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

//ROLE DO USUÁRIO 
enum Role {
  USER      // Usuário comum
  VENDEDOR  // Vendedor
}
